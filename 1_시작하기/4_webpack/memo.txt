웹팩
- 가장 큰 사용 동기는 모듈 시스템을 사용하기 싶어서다.

ESM
- es6에서 추가
- export, default, import, from, as등의 키워드로 작성
- 모던 브라우져에서만 가능 (크로스 브라우징 이슈)

<script type="module" src="/index.js"></script>
- type속성을 module로 설정하여 esm으로 동작하게 설정가능 

commonjs
- node에서 사용
- 브라우져에서는 처리 못함

-----------------------------------------------------------------

웹팩을 사용하지 않는다면 의존성을 가진 js파일들을 순차적으로 마크업함
순서가 중요함!! (글로벌 변수, 클래스, 재선언)
옛날에는 단순해서 스크립트 몇개 안 되서 관리쉬웠는데 많아짐

<html>
  <head>
    <script type="text/javascript" src="file1.js"></script>
    <script type="text/javascript" src="file2.js"></script>
    <script type="text/javascript" src="file3.js"></script>
    <script type="text/javascript" src="file4.js"></script>
  </head>
</html>



웹팩을 사용하면 하나의 파일로 번들링하여 해당 파일만 서비스

<html>
  <head>
    <script type="text/javascript" src="app.js"></script>
  </head>
</html>

-----------------------------------------------------------------

다양한 부가기능도 있다.

- 파일 내용을 기반으로 파일명에 해시값 추가 => 브라우져 캐싱 효율
- 트리 쉐이킹, 파일 압축, 환경 변수 주입
- js에서 css, json을 일반 js 모듈처럼 import해줌

-----------------------------------------------------------------

npm init -y
npm install webpack webpack-cli react react-dom

npx webpack
- 기본 설정으로 웹팩 실행
- src/index.js 파일을 입력으로 dist/main.js로 번들링


- js파일을 차례대로 나열하지 않고 외부라이브러리는 npm으로 관리하고
- 실제 서비스는 모든 코드를 합친 하나의 파일로 번들링해서 진행